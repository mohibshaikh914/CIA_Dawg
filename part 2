Option Explicit

' ************************************************************************************ ' MASTER MACRO: Run this macro for the one-click solution. ' ************************************************************************************ Sub RunAllProcesses_OneClick()

Dim wbProcessed As Workbook
Const OUTPUT_FILENAME As String = "Processed_Master_Data.xlsx"

' === Optimization START ===
Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.Calculation = xlCalculationManual

On Error GoTo ErrHandler

' 1. EXECUTION STEP 1: Data Preparation (Imports files, filters, maps Tickers, and DELETES unmatched funds)
Set wbProcessed = Process_DataPrep_And_Merge(OUTPUT_FILENAME)

If Not wbProcessed Is Nothing Then

    ' 2. EXECUTION STEP 2: Bloomberg Data Extraction and Delta Calculation (Formulas preserved)
    Call Process_Bloomberg_And_Calculate(wbProcessed)

    ' Save the final combined data file
    Application.Calculation = xlCalculationAutomatic ' Set to auto before saving formulas
    Application.DisplayAlerts = False
    ' Save the file in the same directory as the macro workbook
    wbProcessed.SaveAs Filename:=ThisWorkbook.Path & "\" & OUTPUT_FILENAME, FileFormat:=xlOpenXMLWorkbook
    Application.DisplayAlerts = True

    ' Close the temporary processed file
    wbProcessed.Close savechanges:=False

    MsgBox "SUCCESS! The entire data process is completed and the final file is saved as '" & OUTPUT_FILENAME & "' in the same folder as this macro file. ONLY Ticker-mapped funds remain, and formulas are active.", vbInformation
Else
    MsgBox "Process stopped because no data was successfully prepared or no Tickers were matched.", vbExclamation
End If

SafeExit: ' === Optimization END === Application.Calculation = xlCalculationAutomatic Application.DisplayAlerts = True Application.EnableEvents = True Application.ScreenUpdating = True Exit Sub

ErrHandler: ' Restore settings on error Application.Calculation = xlCalculationAutomatic Application.DisplayAlerts = True Application.EnableEvents = True Application.ScreenUpdating = True

MsgBox "An unexpected error occurred: " & Err.Description & vbCrLf & "Process Failed.", vbCritical
If Not wbProcessed Is Nothing Then wbProcessed.Close savechanges:=False

End Sub

' ************************************************************************************ ' FUNCTION: Process_DataPrep_And_Merge (NEW LOGIC: Deletes rows where Ticker is missing) ' ************************************************************************************ Function Process_DataPrep_And_Merge(ByVal sOutputName As String) As Workbook

' === Declarations ===
Dim wbTicker As Workbook, wsTicker As Worksheet, loTicker As ListObject
Dim wbAllFund As Workbook, wsAllFund As Worksheet, loAllFund As ListObject
Dim wbATE As Workbook, wsATE As Worksheet, loATE As ListObject
Dim wbOut As Workbook, wsOut As Worksheet

' Main Loop/Index Variables
Dim sFilePath As String, r As Long, i As Long

' Column Index Variables for All Fund (Source Columns)
Dim buCol As Long, fundGciCol As Long, reviewStatusCol As Long
Dim invMgrCol As Long, iaGciCol As Long, fundNameCol As Long
Dim fundCoperCol As Long, fundLEICol As Long, fundCodeCol As Long
Dim currencyCol As Long, latestNavCol As Long, latestNavDateCol As Long

' Copy Variables 
Dim lTargetCol As Long, lTargetRow As Long

' Ticker mapping dictionary
Dim tickerDict As Object
Set tickerDict = CreateObject("Scripting.Dictionary")

' Other ranges/vars
Dim rngVisibleData As Range
Dim rCell As Range

On Error GoTo ErrHandler_Step1

' *********************************PART A: FILE IMPORTS******************************

sFilePath = GetFilePath("Select the All Funds CSV file"): If sFilePath = "" Then GoTo SafeExit_Step1
Set wbAllFund = Workbooks.Open(sFilePath)
Set wsAllFund = wbAllFund.Sheets(1)

sFilePath = GetFilePath("Select the ATE CSV file"): If sFilePath = "" Then GoTo SafeExit_Step1
Set wbATE = Workbooks.Open(sFilePath)
Set wsATE = wbATE.Sheets(1)

sFilePath = GetFilePath("Select the BB Ticker Excel file"): If sFilePath = "" Then GoTo SafeExit_Step1
Set wbTicker = Workbooks.Open(sFilePath)
Set wsTicker = wbTicker.Sheets(1)
Set loTicker = SetupListObject(wsTicker, "TickerTbl")

' *************************PART B: ALL FUND FILTERING & PREP*************************

' A) Delete First Row and Convert to ListObject
If wsAllFund.UsedRange.Rows.Count > 0 Then wsAllFund.Rows(1).Delete ' <--- Deletes 1st row of data
Set loAllFund = SetupListObject(wsAllFund, "AllFundsTbl")

' B) Header Indexing (Finding Column Positions)
buCol = HeaderIndex(loAllFund, "Business Unit")
fundGciCol = HeaderIndex(loAllFund, "Fund GCI")
invMgrCol = HeaderIndex(loAllFund, "Investment Manager")
iaGciCol = HeaderIndex(loAllFund, "IA GCI")
reviewStatusCol = HeaderIndex(loAllFund, "Review status")
fundNameCol = HeaderIndex(loAllFund, "Fund name")
fundCoperCol = HeaderIndex(loAllFund, "Fund Coper")
fundLEICol = HeaderIndex(loAllFund, "Fund LEI")
fundCodeCol = HeaderIndex(loAllFund, "Fund code")
currencyCol = HeaderIndex(loAllFund, "Currency")
latestNavCol = HeaderIndex(loAllFund, "Latest NAV")
latestNavDateCol = HeaderIndex(loAllFund, "Latest NAV date")

If buCol = 0 Then Err.Raise vbObjectError + 702, , "'Business Unit' column not found."
If fundGciCol = 0 Then Err.Raise vbObjectError + 703, , "'Fund GCI' column not found."

' C) Initial Filtering by Business Unit
Dim vBuFilter As Variant
vBuFilter = Array("FI-EMEA", "FI-US", "FI-GMC-Asia")
loAllFund.Range.AutoFilter Field:=buCol, Criteria1:=vBuFilter, Operator:=xlFilterValues

' *************************PART C: Ticker Mapping & Copy ALL Filtered Data ************************

' D) Load Ticker data into Dictionary
Dim dbFundGciCol As Long, dbTickerCol As Long
dbFundGciCol = HeaderIndex(loTicker, "Fund GCI")
dbTickerCol = HeaderIndex(loTicker, "Ticker")

If dbFundGciCol = 0 Or dbTickerCol = 0 Then
    MsgBox "Error: Ticker file is missing 'Fund GCI' or 'Ticker' column.", vbCritical
    GoTo SafeExit_Step1
End If

With loTicker.DataBodyRange
    For r = 1 To .Rows.Count
        tickerDict(Trim(CStr(.Cells(r, dbFundGciCol).Value))) = .Cells(r, dbTickerCol).Value
    Next r
End With

wbTicker.Close savechanges:=False

' E) Filtered Data Copy to New Workbook (Only Selected Headers)
Dim arrColIndices As Variant
arrColIndices = Array(buCol, invMgrCol, iaGciCol, reviewStatusCol, fundNameCol, _
                      fundGciCol, fundCoperCol, fundLEICol, fundCodeCol, currencyCol, _
                      latestNavCol, latestNavDateCol)

Set wbOut = Workbooks.Add(xlWBATWorksheet)
Set wsOut = wbOut.Sheets(1)
On Error Resume Next
wsOut.Name = "CombinedData"
If Err.Number <> 0 Then
    Err.Clear
    wsOut.Name = "CombinedData_1"
End If
On Error GoTo ErrHandler_Step1

' Headers copy
lTargetCol = 1
For i = LBound(arrColIndices) To UBound(arrColIndices)
    If arrColIndices(i) > 0 Then
        wsOut.Cells(1, lTargetCol).Value = loAllFund.HeaderRowRange.Cells(1, arrColIndices(i)).Value
        lTargetCol = lTargetCol + 1
    End If
Next i

' Visible data copy (Copy ALL VISIBLE rows after BU filter)
On Error Resume Next
Set rngVisibleData = loAllFund.DataBodyRange.SpecialCells(xlCellTypeVisible)
On Error GoTo ErrHandler_Step1

If rngVisibleData Is Nothing Then
    MsgBox "No data found after Business Unit filter.", vbExclamation
    GoTo CloseAllFund
End If

lTargetRow = 2
For Each rCell In rngVisibleData.Columns(1).Cells
    If rCell.Row > loAllFund.HeaderRowRange.Row Then
        lTargetCol = 1
        For i = LBound(arrColIndices) To UBound(arrColIndices)
            If arrColIndices(i) > 0 Then
                wsOut.Cells(lTargetRow, lTargetCol).Value = wsAllFund.Cells(rCell.Row, arrColIndices(i)).Value
                lTargetCol = lTargetCol + 1
            End If
        Next i
        lTargetRow = lTargetRow + 1
    End If
Next rCell

CloseAllFund: If Not wbAllFund Is Nothing Then wbAllFund.Close savechanges:=False

' F) Ticker Mapping & FINAL FILTERING (Logic: Delete rows if Ticker is missing - REVERSE LOOP)
Dim outFundGciCol As Long
outFundGciCol = FindHeaderInSheet(wsOut, "Fund GCI")

lTargetCol = wsOut.Cells(1, wsOut.Columns.Count).End(xlToLeft).Column + 1
wsOut.Cells(1, lTargetCol).Value = "Ticker"

Dim fundGciValue As String
lTargetRow = wsOut.Cells(wsOut.Rows.Count, 1).End(xlUp).Row

For r = lTargetRow To 2 Step -1 ' Loop backwards for SAFE ROW DELETION
    fundGciValue = Trim(CStr(wsOut.Cells(r, outFundGciCol).Value))

    If tickerDict.Exists(fundGciValue) Then
        wsOut.Cells(r, lTargetCol).Value = tickerDict(fundGciValue) ' Ticker found, map it
    Else
        wsOut.Rows(r).Delete ' Ticker NOT found, DELETE the row
    End If
Next r

' Update lTargetRow after deletion
lTargetRow = wsOut.Cells(wsOut.Rows.Count, 1).End(xlUp).Row
If lTargetRow < 2 Then GoTo SafeExit_Step1 ' Stop if all rows were deleted

' *************************PART D: ATE MATCHING & NEW HEADERS************************

' G) Delete First Row of ATE and Setup ListObject
If wsATE.UsedRange.Rows.Count > 0 Then wsATE.Rows(1).Delete
Set loATE = SetupListObject(wsATE, "ATETbl")

' H) ATE Matching Logic (Only on remaining, Ticker-mapped rows)
Dim ateFundGciCol As Long
ateFundGciCol = HeaderIndex(loATE, "Fund GCI")

If ateFundGciCol = 0 Then
    MsgBox "Warning: ATE file is missing 'Fund GCI' column. Cannot perform ATE match.", vbExclamation
Else
    lTargetCol = wsOut.Cells(1, wsOut.Columns.Count).End(xlToLeft).Column + 1
    wsOut.Cells(1, lTargetCol).Value = "ATE"

    Dim ateDict As Object
    Set ateDict = CreateObject("Scripting.Dictionary")

    With loATE.DataBodyRange
        For r = 1 To .Rows.Count
            ateDict(Trim(CStr(.Cells(r, ateFundGciCol).Value))) = True
        Next r
    End With

    For r = 2 To lTargetRow
        fundGciValue = Trim(CStr(wsOut.Cells(r, outFundGciCol).Value))
        If ateDict.Exists(fundGciValue) Then
            wsOut.Cells(r, lTargetCol).Value = "YES"
        Else
            wsOut.Cells(r, lTargetCol).Value = "NO"
        End If
    Next r
End If

If Not wbATE Is Nothing Then wbATE.Close savechanges:=False

' I) Add Remaining New Headers for Step 2
Call AddNewHeader(wsOut, "BB Status")
Call AddNewHeader(wsOut, "NAV")
Call AddNewHeader(wsOut, "BB ccy")
Call AddNewHeader(wsOut, "Delta")
Call AddNewHeader(wsOut, "Comment")

Set Process_DataPrep_And_Merge = wbOut
Exit Function

ErrHandler_Step1: MsgBox "Error in Data Preparation: " & Err.Description & vbCrLf & "Process Failed.", vbCritical If Not wbAllFund Is Nothing Then wbAllFund.Close savechanges:=False If Not wbATE Is Nothing Then wbATE.Close savechanges:=False If Not wbTicker Is Nothing Then wbTicker.Close savechanges:=False If Not wbOut Is Nothing Then wbOut.Close savechanges:=False

SafeExit_Step1: Set Process_DataPrep_And_Merge = Nothing End Function

' ************************************************************************************ ' SUBROUTINE: Process_Bloomberg_And_Calculate (Formulas Preserved) ' ************************************************************************************ Sub Process_Bloomberg_And_Calculate(ByVal wbTarget As Workbook)

' === Date Input Variables ===
Dim sTargetDate As Variant
Dim sStartDate As Variant
Dim sEndDate As Variant

' === Local Declarations ===
Dim ws As Worksheet
Set ws = wbTarget.Sheets("CombinedData")
Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
Dim r As Long

' Output Columns Indexing
Dim tickerCol As Long: tickerCol = FindHeaderInSheet(ws, "Ticker")
Dim bbStatusCol As Long: bbStatusCol = FindHeaderInSheet(ws, "BB Status")
Dim navCol As Long: navCol = FindHeaderInSheet(ws, "NAV")
Dim latestNavCol As Long: latestNavCol = FindHeaderInSheet(ws, "Latest NAV")
Dim deltaCol As Long: deltaCol = FindHeaderInSheet(ws, "Delta")
Dim commentsCol As Long: commentsCol = FindHeaderInSheet(ws, "Comment")
Dim bbCcyCol As Long: bbCcyCol = FindHeaderInSheet(ws, "BB ccy")

If lRow < 2 Then Exit Sub

' === 1. GET DATE INPUT FROM USER ===

sTargetDate = Application.InputBox( _
    Prompt:="Enter Target NAV Date (YYYYMMDD, e.g., 20251028):", _
    Title:="Bloomberg Target Date", Type:=2)
If VarType(sTargetDate) = vbBoolean And sTargetDate = False Then Exit Sub
If CStr(sTargetDate) = "" Then Exit Sub

sStartDate = Application.InputBox( _
    Prompt:="Enter Fallback Start Date (YYYYMMDD, e.g., 20251020):", _
    Title:="Bloomberg Range Start Date", Type:=2)
If VarType(sStartDate) = vbBoolean And sStartDate = False Then Exit Sub
If CStr(sStartDate) = "" Then Exit Sub

sEndDate = Application.InputBox( _
    Prompt:="Enter Fallback End Date (YYYYMMDD, e.g., 20251028):", _
    Title:="Bloomberg Range End Date", Type:=2)
If VarType(sEndDate) = vbBoolean And sEndDate = False Then Exit Sub
If CStr(sEndDate) = "" Then Exit Sub

' === 2. BLOOMBERG FORMULA APPLICATION (PASS 1: Target Date) ===

' BB Status Formula
ws.Cells(2, bbStatusCol).FormulaR1C1 = _
    "=IFERROR(BDP(RC" & tickerCol & ",""MARKET_STATUS""),""#N/A"")"

' NAV Formula (BDH - Single Target Date)
ws.Cells(2, navCol).FormulaR1C1 = _
    "=IFERROR(BDH(RC" & tickerCol & ",""FUND_TOTAL_ASSETS"",""" & CStr(sTargetDate) & """ & ",""" & CStr(sTargetDate) & """ & ",""points=1""),""#N/A"")"

' BB Currency Formula
ws.Cells(2, bbCcyCol).FormulaR1C1 = _
    "=IFERROR(BDP(RC" & tickerCol & ",""CURRENCY""),""#N/A"")"

' Fill formulas down
ws.Range(ws.Cells(2, bbStatusCol), ws.Cells(lRow, bbStatusCol)).FillDown
ws.Range(ws.Cells(2, navCol), ws.Cells(lRow, navCol)).FillDown
ws.Range(ws.Cells(2, bbCcyCol), ws.Cells(lRow, bbCcyCol)).FillDown

' === 3. BLOOMBERG FORMULA APPLICATION (PASS 2: Date Range for #N/A) ===

' Pass 2 formula only applies if Pass 1 failed (NAV is #N/A)
For r = 2 To lRow
    If CStr(ws.Cells(r, navCol).Value) = "#N/A" Then
        ' Apply the Date Range formula
        ws.Cells(r, navCol).FormulaR1C1 = _
            "=IFERROR(BDH(RC" & tickerCol & ",""FUND_TOTAL_ASSETS"",""" & CStr(sStartDate) & """ & ",""" & CStr(sEndDate) & """ & ",""points=1""),""#N/A"")"
    End If
Next r

' NOTE: Formulas are preserved.

' === 4. DELTA CALCULATION & COMMENTING ===

' Delta formula: (NAV - latest nav) / latest NAV
ws.Cells(2, deltaCol).FormulaR1C1 = "=(RC" & navCol & " - RC" & latestNavCol & ") / RC" & latestNavCol

ws.Range(ws.Cells(2, deltaCol), ws.Cells(lRow, deltaCol)).FillDown

' Formatting for Delta
ws.Columns(deltaCol).NumberFormat = "0.00%"

' Commenting logic
For r = 2 To lRow
    ws.Cells(r, commentsCol).Value = "CHECK DELTA AFTER BLOOMBERG REFRESH"
Next r

End Sub

' ************************************************************************************ '                                  SUPPORT FUNCTIONS (No Change) ' ************************************************************************************ Private Function HeaderIndex(ByVal lo As ListObject, ByVal headerName As String) As Long Dim hdr As Range For Each hdr In lo.HeaderRowRange.Cells If LCase(Trim(CStr(hdr.Value))) = LCase(Trim(headerName)) Then HeaderIndex = hdr.Column Exit Function End If Next hdr HeaderIndex = 0 End Function

Private Function FindHeaderInSheet(ByVal ws As Worksheet, ByVal headerName As String) As Long Dim rHeader As Range Set rHeader = ws.Rows(1).Find(What:=headerName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False) If Not rHeader Is Nothing Then FindHeaderInSheet = rHeader.Column Else FindHeaderInSheet = 0 End If End Function

Private Sub AddNewHeader(ByVal ws As Worksheet, ByVal headerName As String) Dim lLastCol As Long lLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column If ws.Cells(1, lLastCol).Value <> "" Then lLastCol = lLastCol + 1

ws.Cells(1, lLastCol).Value = headerName

End Sub

Private Function GetFilePath(ByVal sTitle As String) As String Dim fldg As FileDialog Set fldg = Application.FileDialog(msoFileDialogFilePicker) With fldg .Title = sTitle .AllowMultiSelect = False .Filters.Clear If InStr(1, sTitle, "CSV", vbTextCompare) > 0 Then .Filters.Add "CSV Files", ".csv" ElseIf InStr(1, sTitle, "Excel", vbTextCompare) > 0 Then .Filters.Add "Excel Files", ".xls;.xlsx" Else .Filters.Add "All Files", ".*" End If

If .Show = -1 Then GetFilePath = .SelectedItems(1) Else GetFilePath = ""
End With

End Function

Private Function SetupListObject(ByVal ws As Worksheet, ByVal sName As String) As ListObject Dim lRow As Long lRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row

' Check for empty sheet
If lRow < 1 Then Err.Raise vbObjectError + 700, , "Selected sheet is empty."

' Use positional parameters to avoid named-argument issues across Excel versions
Set SetupListObject = ws.ListObjects.Add(xlSrcRange, ws.Range(ws.Cells(1, 1), ws.Cells(lRow, ws.UsedRange.Columns.Count)), , xlYes)
SetupListObject.Name = sName

End Function