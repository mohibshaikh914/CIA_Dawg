Option Explicit

' ************************************************************************************
' MASTER MACRO: Run this macro for the one-click solution.
' Executes Step 1 (Data Prep) and Step 2 (Bloomberg & Calc) sequentially.
' ************************************************************************************
Sub RunAllProcesses_OneClick()

    Dim wbProcessed As Workbook
    Const OUTPUT_FILENAME As String = "Processed_Master_Data.xlsx"

    ' === Optimization START ===
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo ErrHandler
    
    ' 1. STEP 1: Data Preparation (Returns the new workbook)
    Set wbProcessed = Process_Step1_DataPrep(OUTPUT_FILENAME)
    
    If Not wbProcessed Is Nothing Then
        
        ' 2. STEP 2: Bloomberg Data Extraction, Delta Calc, and Commenting
        Call Process_Step2_BloombergAndCalc(wbProcessed)
        
        ' Save the final combined data file
        Application.DisplayAlerts = False ' Suppress overwrite warnings
        ' Save the file in the same directory as the macro workbook
        wbProcessed.SaveAs Filename:=ThisWorkbook.Path & "\" & OUTPUT_FILENAME, FileFormat:=xlOpenXMLWorkbook
        Application.DisplayAlerts = True
        
        ' Close the temporary processed file
        wbProcessed.Close savechanges:=False
        
        MsgBox "SUCCESS! Data processing completed and the final file is saved as '" & OUTPUT_FILENAME & "' in the same folder as this macro file.", vbInformation
    Else
        MsgBox "Process stopped because no data was successfully prepared in Step 1.", vbExclamation
    End If
    
SafeExit:
    ' === Optimization END ===
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
    
ErrHandler:
    ' Restore settings on error
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    MsgBox "An unexpected error occurred: " & Err.Description & vbCrLf & "Process Failed.", vbCritical
    If Not wbProcessed Is Nothing Then wbProcessed.Close savechanges:=False
    
End Sub

' ************************************************************************************
' Function 1: Process_Step1_DataPrep
' Purpose: Imports 3 files, filters All Fund, maps Tickers, matches ATE, and returns 
'          the new processed workbook ready for Step 2.
' ************************************************************************************
Function Process_Step1_DataPrep(ByVal sOutputName As String) As Workbook

    ' === Declarations ===
    Dim wbTicker As Workbook, wsTicker As Worksheet, loTicker As ListObject
    Dim wbAllFund As Workbook, wsAllFund As Worksheet, loAllFund As ListObject
    Dim wbATE As Workbook, wsATE As Worksheet, loATE As ListObject
    Dim wbOut As Workbook, wsOut As Worksheet
    
    ' Main Loop/Index Variables
    Dim sFilePath As String, r As Long, i As Long
    
    ' Column Index Variables for All Fund (Source Columns)
    Dim buCol As Long, fundGciCol As Long, reviewStatusCol As Long
    Dim invMgrCol As Long, iaGciCol As Long, fundNameCol As Long
    Dim fundCoperCol As Long, fundLEICol As Long, fundCodeCol As Long
    Dim currencyCol As Long, latestNavCol As Long, latestNavDateCol As Long
    
    ' Copy Variables (NEW/FIXED)
    Dim lTargetCol As Long, lTargetRow As Long ' FIXED: lTargetRow was missing Dim
    
    ' Ticker mapping dictionary
    Dim tickerDict As Object
    Set tickerDict = CreateObject("Scripting.Dictionary")
    
    On Error GoTo ErrHandler_Step1

    ' *********************************PART A: FILE IMPORTS******************************
    
    sFilePath = GetFilePath("Select the All Funds CSV file"): If sFilePath = "" Then GoTo SafeExit_Step1
    Set wbAllFund = Workbooks.Open(sFilePath)
    Set wsAllFund = wbAllFund.Sheets(1)
    
    sFilePath = GetFilePath("Select the ATE CSV file"): If sFilePath = "" Then GoTo SafeExit_Step1
    Set wbATE = Workbooks.Open(sFilePath)
    Set wsATE = wbATE.Sheets(1)
    
    sFilePath = GetFilePath("Select the BB Ticker Excel file"): If sFilePath = "" Then GoTo SafeExit_Step1
    Set wbTicker = Workbooks.Open(sFilePath)
    Set wsTicker = wbTicker.Sheets(1)
    Set loTicker = SetupListObject(wsTicker, "TickerTbl")
    
    ' *************************PART B: ALL FUND FILTERING & PREP*************************

    ' A) Delete First Row and Convert to ListObject
    If wsAllFund.UsedRange.Rows.Count > 0 Then wsAllFund.Rows(1).Delete
    Set loAllFund = SetupListObject(wsAllFund, "AllFundsTbl")
    
    ' B) Header Indexing (Finding Column Positions)
    buCol = HeaderIndex(loAllFund, "Business Unit")
    invMgrCol = HeaderIndex(loAllFund, "Investment Manager")
    iaGciCol = HeaderIndex(loAllFund, "IA GCI")
    reviewStatusCol = HeaderIndex(loAllFund, "Review status")
    fundNameCol = HeaderIndex(loAllFund, "Fund name")
    fundGciCol = HeaderIndex(loAllFund, "Fund GCI")
    fundCoperCol = HeaderIndex(loAllFund, "Fund Coper")
    fundLEICol = HeaderIndex(loAllFund, "Fund LEI")
    fundCodeCol = HeaderIndex(loAllFund, "Fund code")
    currencyCol = HeaderIndex(loAllFund, "Currency")
    latestNavCol = HeaderIndex(loAllFund, "Latest NAV")
    latestNavDateCol = HeaderIndex(loAllFund, "Latest NAV date")
    
    If buCol = 0 Then Err.Raise vbObjectError + 702, , "'Business Unit' column not found."
    If fundGciCol = 0 Then Err.Raise vbObjectError + 703, , "'Fund GCI' column not found."
    
    ' C) Initial Filtering by Business Unit
    Dim vBuFilter As Variant
    vBuFilter = Array("FI-EMEA", "FI-US", "FI-GMC-Asia")
    loAllFund.Range.AutoFilter Field:=buCol, Criteria1:=vBuFilter, Operator:=xlFilterValues
    
    ' *************************PART C: TICKER MAPPING & FILTERING************************
    
    ' D) Load Ticker data into Dictionary
    Dim dbFundGciCol As Long, dbTickerCol As Long
    dbFundGciCol = HeaderIndex(loTicker, "Fund GCI")
    dbTickerCol = HeaderIndex(loTicker, "Ticker")
    
    If dbFundGciCol = 0 Or dbTickerCol = 0 Then
        MsgBox "Error: Ticker file is missing 'Fund GCI' or 'Ticker' column.", vbCritical
        GoTo SafeExit_Step1
    End If
    
    With loTicker.DataBodyRange
        For r = 1 To .Rows.Count
            tickerDict(Trim(.Cells(r, dbFundGciCol).Value)) = .Cells(r, dbTickerCol).Value
        Next r
    End With
    
    wbTicker.Close savechanges:=False
    
    ' E) Filtered Data Copy to New Workbook
    Dim arrColIndices As Variant
    arrColIndices = Array(buCol, invMgrCol, iaGciCol, reviewStatusCol, fundNameCol, _
                          fundGciCol, fundCoperCol, fundLEICol, fundCodeCol, currencyCol, _
                          latestNavCol, latestNavDateCol)
    
    Set wbOut = Workbooks.Add(xlWBATWorksheet)
    Set wsOut = wbOut.Sheets(1)
    wsOut.Name = "CombinedData"
    
    ' Headers copy
    lTargetCol = 1
    For i = LBound(arrColIndices) To UBound(arrColIndices)
        If arrColIndices(i) > 0 Then
            wsOut.Cells(1, lTargetCol).Value = loAllFund.HeaderRowRange.Cells(1, arrColIndices(i)).Value
            lTargetCol = lTargetCol + 1
        End If
    Next i
    
    ' Visible data copy (Robust Logic)
    Dim rngVisibleData As Range, rCell As Range
    On Error Resume Next
    Set rngVisibleData = loAllFund.DataBodyRange.SpecialCells(xlCellTypeVisible)
    On Error GoTo ErrHandler_Step1
    
    If rngVisibleData Is Nothing Then
        MsgBox "No data found after Business Unit filter.", vbExclamation
        GoTo CloseAllFund
    End If
    
    lTargetRow = 2 ' Initialized here
    For Each rCell In rngVisibleData.Columns(1).Cells
        If rCell.Row > loAllFund.HeaderRowRange.Row Then
            lTargetCol = 1
            For i = LBound(arrColIndices) To UBound(arrColIndices)
                If arrColIndices(i) > 0 Then
                    wsOut.Cells(lTargetRow, lTargetCol).Value = wsAllFund.Cells(rCell.Row, arrColIndices(i)).Value
                    lTargetCol = lTargetCol + 1
                End If
            Next i
            lTargetRow = lTargetRow + 1
        End If
    Next rCell
    
CloseAllFund:
    wbAllFund.Close savechanges:=False
    
    ' F) Ticker Mapping & Final Filtering (Delete rows without Ticker)
    Dim outFundGciCol As Long
    outFundGciCol = FindHeaderInSheet(wsOut, "Fund GCI")
    
    lTargetCol = wsOut.Cells(1, wsOut.Columns.Count).End(xlToLeft).Column + 1
    wsOut.Cells(1, lTargetCol).Value = "Ticker"
    
    Dim fundGciValue As String
    lTargetRow = wsOut.Cells(wsOut.Rows.Count, 1).End(xlUp).Row
    
    For r = lTargetRow To 2 Step -1
        fundGciValue = Trim(wsOut.Cells(r, outFundGciCol).Value)
        
        If tickerDict.Exists(fundGciValue) Then
            wsOut.Cells(r, lTargetCol).Value = tickerDict(fundGciValue)
        Else
            wsOut.Rows(r).Delete
        End If
    Next r
    
    ' *************************PART D: ATE MATCHING & NEW HEADERS************************

    ' G) Delete First Row of ATE and Setup ListObject
    If wsATE.UsedRange.Rows.Count > 0 Then wsATE.Rows(1).Delete
    Set loATE = SetupListObject(wsATE, "ATETbl")
    
    ' H) ATE Matching Logic
    Dim ateFundGciCol As Long
    ateFundGciCol = HeaderIndex(loATE, "Fund GCI")
    
    If ateFundGciCol = 0 Then
        ' Warning: ATE match cannot be performed, but process continues
        MsgBox "Warning: ATE file is missing 'Fund GCI' column. Cannot perform ATE match.", vbExclamation
    Else
        lTargetCol = wsOut.Cells(1, wsOut.Columns.Count).End(xlToLeft).Column + 1
        wsOut.Cells(1, lTargetCol).Value = "ATE"
        
        Dim ateDict As Object
        Set ateDict = CreateObject("Scripting.Dictionary")
        
        With loATE.DataBodyRange
            For r = 1 To .Rows.Count
                ateDict(Trim(.Cells(r, ateFundGciCol).Value)) = True
            Next r
        End With
        
        lTargetRow = wsOut.Cells(wsOut.Rows.Count, 1).End(xlUp).Row
        For r = 2 To lTargetRow
            fundGciValue = Trim(wsOut.Cells(r, outFundGciCol).Value)
            If ateDict.Exists(fundGciValue) Then
                wsOut.Cells(r, lTargetCol).Value = "YES"
            Else
                wsOut.Cells(r, lTargetCol).Value = "NO"
            End If
        Next r
    End If
    
    wbATE.Close savechanges:=False
    
    ' I) Add Remaining New Headers for Step 2
    Call AddNewHeader(wsOut, "BB Status")
    Call AddNewHeader(wsOut, "NAV")
    Call AddNewHeader(wsOut, "BB ccy")
    Call AddNewHeader(wsOut, "Delta")
    Call AddNewHeader(wsOut, "Comment")
    
    Set Process_Step1_DataPrep = wbOut
    Exit Function
    
ErrHandler_Step1:
    MsgBox "Error in Step 1: " & Err.Description & vbCrLf & "Process Failed", vbCritical
    If Not wbAllFund Is Nothing Then wbAllFund.Close savechanges:=False
    If Not wbATE Is Nothing Then wbATE.Close savechanges:=False
    If Not wbTicker Is Nothing Then wbTicker.Close savechanges:=False
    If Not wbOut Is Nothing Then wbOut.Close savechanges:=False
    
SafeExit_Step1:
    Set Process_Step1_DataPrep = Nothing
End Function

' ************************************************************************************
' Subroutine 2: Process_Step2_BloombergAndCalc
' Purpose: Extracts BDH/BDP data, calculates Delta, and assigns comments.
' ************************************************************************************
Sub Process_Step2_BloombergAndCalc(ByVal wbTarget As Workbook)

    ' === Date Input Variables ===
    Dim sTargetDate As String
    Dim sStartDate As String
    Dim sEndDate As String
    
    ' === Local Declarations ===
    Dim ws As Worksheet
    Set ws = wbTarget.Sheets("CombinedData")
    Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row ' FIXED: lRow Dim added/checked
    Dim r As Long ' FIXED: r Dim added

    ' Output Columns Indexing
    Dim tickerCol As Long: tickerCol = FindHeaderInSheet(ws, "Ticker")
    Dim bbStatusCol As Long: bbStatusCol = FindHeaderInSheet(ws, "BB Status")
    Dim navCol As Long: navCol = FindHeaderInSheet(ws, "NAV")
    Dim latestNavCol As Long: latestNavCol = FindHeaderInSheet(ws, "Latest NAV")
    Dim deltaCol As Long: deltaCol = FindHeaderInSheet(ws, "Delta")
    Dim commentsCol As Long: commentsCol = FindHeaderInSheet(ws, "Comment")
    ' FIXED: bbCcyCol Dim added (even if not strictly used in current logic)
    Dim bbCcyCol As Long: bbCcyCol = FindHeaderInSheet(ws, "BB ccy") 

    If lRow < 2 Then Exit Sub ' No data

    ' === 1. GET DATE INPUT FROM USER ===
    
    sTargetDate = Application.InputBox( _
        Prompt:="Enter Target NAV Date (YYYYMMDD, e.g., 20250930):", _
        Title:="Bloomberg Target Date", Type:=2)
    If sTargetDate = "False" Or sTargetDate = "" Then Exit Sub
    
    sStartDate = Application.InputBox( _
        Prompt:="Enter Fallback Start Date (YYYYMMDD, e.g., 20250926):", _
        Title:="Bloomberg Range Start Date", Type:=2)
    If sStartDate = "False" Or sStartDate = "" Then Exit Sub
    
    sEndDate = Application.InputBox( _
        Prompt:="Enter Fallback End Date (YYYYMMDD, e.g., 20251004):", _
        Title:="Bloomberg Range End Date", Type:=2)
    If sEndDate = "False" Or sEndDate = "" Then Exit Sub

    ' === 2. BLOOMBERG FORMULA APPLICATION (PASS 1: Target Date) ===
    
    Application.Calculation = xlCalculationAutomatic
    
    ' BB Status Formula (Direct BDP)
    ws.Cells(2, bbStatusCol).FormulaR1C1 = _
        "=IFERROR(BDP(RC" & tickerCol & ",""MARKET_STATUS""),""#N/A"")"
    
    ' NAV Formula (BDH - Single Target Date)
    ws.Cells(2, navCol).FormulaR1C1 = _
        "=IFERROR(BDH(RC" & tickerCol & ",""FUND_TOTAL_ASSETS"",""" & sTargetDate & """,""" & sTargetDate & """,""points=1""),""#N/A"")"
        
    ' BB Currency Formula (Optional BDP)
    ws.Cells(2, bbCcyCol).FormulaR1C1 = _
        "=IFERROR(BDP(RC" & tickerCol & ",""CURRENCY""),""#N/A"")"

    ' Fill formulas down
    ws.Range(ws.Cells(2, bbStatusCol), ws.Cells(lRow, bbStatusCol)).FillDown
    ws.Range(ws.Cells(2, navCol), ws.Cells(lRow, navCol)).FillDown
    ws.Range(ws.Cells(2, bbCcyCol), ws.Cells(lRow, bbCcyCol)).FillDown ' Fixed: FillDown for Ccy

    ' Wait for data fetch
    Application.Calculate
    
    ' Convert formulas to values (BB Status, NAV, BB Ccy)
    ws.Columns(bbStatusCol).Copy: ws.Columns(bbStatusCol).PasteSpecial xlPasteValues
    ws.Columns(navCol).Copy: ws.Columns(navCol).PasteSpecial xlPasteValues
    ws.Columns(bbCcyCol).Copy: ws.Columns(bbCcyCol).PasteSpecial xlPasteValues ' Fixed: Ccy paste values
    Application.CutCopyMode = False
    
    ' === 3. BLOOMBERG FORMULA APPLICATION (PASS 2: Date Range for #N/A) ===
    
    Application.Calculation = xlCalculationAutomatic
    
    For r = 2 To lRow
        If CStr(ws.Cells(r, navCol).Value) = "#N/A" Then
            ' Apply the Date Range formula
            ws.Cells(r, navCol).FormulaR1C1 = _
                "=IFERROR(BDH(RC" & tickerCol & ",""FUND_TOTAL_ASSETS"",""" & sStartDate & """,""" & sEndDate & """,""points=1""),""#N/A"")"
        End If
    Next r
    
    ' Wait for data fetch from Pass 2
    Application.Calculate
    
    ' Final convert formulas to values for NAV
    ws.Columns(navCol).Copy: ws.Columns(navCol).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    Application.Calculation = xlCalculationManual 
    
    ' === 4. DELTA CALCULATION & COMMENTING ===
    
    ' Delta formula: (NAV - latest nav) / latest NAV 
    ws.Cells(2, deltaCol).FormulaR1C1 = "=(RC" & navCol & " - RC" & latestNavCol & ") / RC" & latestNavCol
    ws.Range(ws.Cells(2, deltaCol), ws.Cells(lRow, deltaCol)).FillDown
    
    ' Format as Percentage and Convert to Values
    ws.Columns(deltaCol).NumberFormat = "0.00%"
    ws.Columns(deltaCol).Copy: ws.Columns(deltaCol).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    ' Commenting logic 
    Dim deltaVal As Variant
    For r = 2 To lRow
        deltaVal = ws.Cells(r, deltaCol).Value
        
        If IsError(deltaVal) Or IsEmpty(deltaVal) Then
            ws.Cells(r, commentsCol).Value = "Delta Error"
        ElseIf deltaVal > 1 Or deltaVal < -0.5 Then 
            ws.Cells(r, commentsCol).Value = "Delta Check"
        Else
            ws.Cells(r, commentsCol).Value = "Update"
        End If
    Next r
    
End Sub

' ************************************************************************************
'                                  SUPPORT FUNCTIONS
' ************************************************************************************

Private Function HeaderIndex(ByVal lo As ListObject, ByVal headerName As String) As Long
    ' Returns 1-based index (sheet column number)
    Dim hdr As Range
    For Each hdr In lo.HeaderRowRange.Cells
        If LCase(Trim(hdr.Value)) = LCase(Trim(headerName)) Then
            HeaderIndex = hdr.Column
            Exit Function
        End If
    Next hdr
    HeaderIndex = 0
End Function

Private Function FindHeaderInSheet(ByVal ws As Worksheet, ByVal headerName As String) As Long
    ' Finds header in a regular sheet (not ListObject)
    Dim rHeader As Range
    Set rHeader = ws.Rows(1).Find(What:=headerName, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
    If Not rHeader Is Nothing Then
        FindHeaderInSheet = rHeader.Column
    Else
        FindHeaderInSheet = 0
    End If
End Function

Private Sub AddNewHeader(ByVal ws As Worksheet, ByVal headerName As String)
    ' Adds a new header to the right of the existing columns
    Dim lLastCol As Long
    lLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If ws.Cells(1, lLastCol).Value <> "" Then lLastCol = lLastCol + 1
    
    ws.Cells(1, lLastCol).Value = headerName
End Sub

Private Function GetFilePath(ByVal sTitle As String) As String
    ' Function to show File Picker dialog
    Dim fldg As FileDialog
    Set fldg = Application.FileDialog(msoFileDialogFilePicker)
    With fldg
        .Title = sTitle
        .AllowMultiSelect = False
        .Filters.Clear
        If InStr(sTitle, "CSV") > 0 Then
            .Filters.Add "CSV Files", "*.csv"
        ElseIf InStr(sTitle, "Excel") > 0 Then
            .Filters.Add "Excel Files", "*.xls;*.xlsx"
        Else
            .Filters.Add "All Files", "*.*"
        End If
        
        If .Show = -1 Then GetFilePath = .SelectedItems(1) Else GetFilePath = ""
    End With
End Function

Private Function SetupListObject(ByVal ws As Worksheet, ByVal sName As String) As ListObject
    ' Function to convert data into ListObject
    Dim lRow As Long
    lRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Check for empty sheet
    If lRow < 1 Then Err.Raise vbObjectError + 700, , "Selected sheet is empty."
    
    Set SetupListObject = ws.ListObjects.Add( _
        SourceType:=xlSrcRange, _
        Source:=ws.Range(ws.Cells(1, 1), ws.Cells(lRow, ws.UsedRange.Columns.Count)), _
        XlListObjectHasHeaders:=xlYes)
    SetupListObject.Name = sName
End Function
