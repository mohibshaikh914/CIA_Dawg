Option Explicit

' ************************************************************************************
' Macro: MasterDataProcessorV2
' Purpose: Imports data from 3 files, performs filtering, matching, data extraction
'          from Bloomberg, calculation, commenting, and splits output into 2 files.
' ************************************************************************************
Sub MasterDataProcessorV2()

    ' === Declarations (Variables) ===
    Dim wbTicker As Workbook, wsTicker As Worksheet, loTicker As ListObject
    Dim wbAllFund As Workbook, wsAllFund As Worksheet, loAllFund As ListObject ' Source 2 (All Fund)
    Dim wbATE As Workbook, wsATE As Worksheet, loATE As ListObject             ' Source 3 (ATE)
    
    Dim fldg As FileDialog, sFilePath As String
    Dim lRow As Long, lCol As Long
    
    ' Column Index Variables - Initialized later in the configuration section
    Dim buCol As Long, fundGciCol As Long, tickerCol As Long
    Dim reviewStatusCol As Long, bbStatusCol As Long
    Dim navCol As Long, latestNavCol As Long, deltaCol As Long, commentsCol As Long

    ' === Performance Optimization (Same as before) ===
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo ErrHandler
    
    ' ************************************************************************************
    '                             FILE SELECTION & IMPORT (ALL 3)
    ' ************************************************************************************

    ' 1) Pick Ticker File (Excel)
    sFilePath = GetFilePath("Select the Ticker File (Excel)")
    If sFilePath = "" Then GoTo SafeExit
    Set wbTicker = Workbooks.Open(sFilePath)
    Set wsTicker = wbTicker.Sheets(1)
    Set loTicker = SetupListObject(wsTicker, "TickerTbl")

    ' 2) Pick All Funds File (CSV)
    sFilePath = GetFilePath("Select the All Funds CSV file")
    If sFilePath = "" Then GoTo SafeExit
    Set wbAllFund = Workbooks.Open(sFilePath)
    Set wsAllFund = wbAllFund.Sheets(1)
    
    ' 3) Pick ATE File (CSV)
    sFilePath = GetFilePath("Select the ATE CSV file")
    If sFilePath = "" Then GoTo SafeExit
    Set wbATE = Workbooks.Open(sFilePath)
    Set wsATE = wbATE.Sheets(1)
    Set loATE = SetupListObject(wsATE, "ATETbl")
    
    
    ' ************************************************************************************
    '                             STEP 1: ALL FUNDS FILTERING & HEADER SELECTION
    ' ************************************************************************************

    ' A) Delete First Row and Convert to ListObject
    If wsAllFund.UsedRange.Rows.Count > 0 Then wsAllFund.Rows(1).Delete
    lRow = wsAllFund.Cells(wsAllFund.Rows.Count, 1).End(xlUp).Row
    Set loAllFund = wsAllFund.ListObjects.Add( _
        SourceType:=xlSrcRange, _
        Source:=wsAllFund.Range(wsAllFund.Cells(1, 1), wsAllFund.Cells(lRow, wsAllFund.UsedRange.Columns.Count)), _
        XlListObjectHasHeaders:=xlYes)
    loAllFund.Name = "AllFundsTbl"
    
    ' B) Header Indexing (Finding Column Positions)
    
    ' <<<<< REQUIRED CONFIGURATION - START: HEADER INDICES >>>>>
    ' ***********************************************************
    ' Define All Required Column Indices (1-based sheet column number)
    ' ***********************************************************
    
    Dim iaNameCol As Long, iaGciCol As Long, fundNameCol As Long
    Dim fundCoperCol As Long, fundCodeCol As Long, fundLEICol As Long
    ' Add more Dim statements here for any additional headers:
    ' Dim exampleCol As Long
    
    ' Finding the index for critical columns
    buCol = HeaderIndex(loAllFund, "Business Unit")
    fundGciCol = HeaderIndex(loAllFund, "Fund GCI")
    reviewStatusCol = HeaderIndex(loAllFund, "Review Status")
    
    ' Finding the index for all other required columns
    iaNameCol = HeaderIndex(loAllFund, "IA Name")
    iaGciCol = HeaderIndex(loAllFund, "IA GCI")
    fundNameCol = HeaderIndex(loAllFund, "Fund Name")
    fundCoperCol = HeaderIndex(loAllFund, "Fund Coper")
    fundCodeCol = HeaderIndex(loAllFund, "Fund Code")
    fundLEICol = HeaderIndex(loAllFund, "Fund LEI")
    
    ' Error check: Critical check for mandatory columns
    If buCol = 0 Then Err.Raise vbObjectError + 702, , "'Business Unit' column not found."
    If fundGciCol = 0 Then Err.Raise vbObjectError + 703, , "'Fund GCI' column not found."
    
    ' <<<<< REQUIRED CONFIGURATION - END: HEADER INDICES >>>>>

    ' C) Initial Filtering by Business Unit
    
    ' Filter array for required Business Units
    Dim vBuFilter As Variant
    vBuFilter = Array("FI-EMEA", "FI US", "FI GMC AISA") 
    
    loAllFund.Range.AutoFilter Field:=buCol, Criteria1:=vBuFilter, Operator:=xlFilterValues
    
    
    ' ************************************************************************************
    '                             STEP 2: TICKER MATCHING & MAPPING
    ' ************************************************************************************
    
    Dim tickerDict As Object ' Dictionary for faster Ticker lookup
    Set tickerDict = CreateObject("Scripting.Dictionary")
    
    Dim dbFundGciCol As Long, dbTickerCol As Long
    dbFundGciCol = HeaderIndex(loTicker, "Fund GCI") ' Assumes Ticker file has 'Fund GCI'
    dbTickerCol = HeaderIndex(loTicker, "Ticker")    ' Assumes Ticker file has 'Ticker'

    If dbFundGciCol = 0 Or dbTickerCol = 0 Then
        MsgBox "Error: Ticker file is missing 'Fund GCI' or 'Ticker' column.", vbCritical
        GoTo SafeExit
    End If
    
    ' Load Ticker data into Dictionary (Fund GCI as Key, Ticker as Item)
    Dim r As Long
    With loTicker.DataBodyRange
        For r = 1 To .Rows.Count
            tickerDict(.Cells(r, dbFundGciCol).Value) = .Cells(r, dbTickerCol).Value
        Next r
    End With
    
    ' Close Ticker file (as its data is in memory)
    wbTicker.Close savechanges:=False 
    
    ' New column for Ticker in All Fund data
    loAllFund.ListColumns.Add.Name = "Ticker"
    tickerCol = HeaderIndex(loAllFund, "Ticker") ' Find the new Ticker column index

    ' 2a) Filter All Fund (Visible Rows Only) by matching Fund GCI with Ticker Dict
    Dim rngVisible As Range
    On Error Resume Next
    Set rngVisible = loAllFund.DataBodyRange.SpecialCells(xlCellTypeVisible)
    On Error GoTo ErrHandler
    
    If rngVisible Is Nothing Then
        MsgBox "No data found after Business Unit filter.", vbExclamation
        GoTo SafeExit
    End If
    
    ' Remove rows whose Fund GCI is NOT in the Ticker file
    Dim rowRng As Range
    For Each rowRng In rngVisible.Rows
        Dim fundGciValue As String
        fundGciValue = Trim(rowRng.Cells(1, fundGciCol).Value)
        
        If Not tickerDict.Exists(fundGciValue) Then
            ' Delete the entire visible row if no match found
            rowRng.Delete
        Else
            ' Map the Ticker to the remaining row
            rowRng.Cells(1, tickerCol).Value = tickerDict(fundGciValue)
        End If
    Next rowRng
    
    ' Remove AutoFilter to work with the remaining filtered data
    loAllFund.AutoFilter.ShowAllData
    
    
    ' ************************************************************************************
    '                             STEP 3: ATE MATCHING & APPROVED STATUS
    ' ************************************************************************************

    Dim ateFundGciCol As Long, ateReviewStatusCol As Long
    ateFundGciCol = HeaderIndex(loATE, "Fund GCI") 
    ateReviewStatusCol = HeaderIndex(loATE, "Review Status")
    
    If ateFundGciCol = 0 Or ateReviewStatusCol = 0 Then
        MsgBox "Error: ATE file is missing 'Fund GCI' or 'Review Status' column.", vbCritical
        GoTo SafeExit
    End If
    
    ' New column for ATE Match Status
    loAllFund.ListColumns.Add.Name = "ATE Match Status"
    Dim ateMatchCol As Long: ateMatchCol = HeaderIndex(loAllFund, "ATE Match Status")
    
    ' Loop through remaining All Fund data and check for Approved status in ATE
    Dim allFundRow As Range
    Dim ateRow As Range
    
    For Each allFundRow In loAllFund.DataBodyRange.Rows
        Dim matchFound As Boolean: matchFound = False
        Dim currentGci As String: currentGci = Trim(allFundRow.Cells(1, fundGciCol).Value)
        
        For Each ateRow In loATE.DataBodyRange.Rows
            If Trim(ateRow.Cells(1, ateFundGciCol).Value) = currentGci And _
               LCase(Trim(ateRow.Cells(1, ateReviewStatusCol).Value)) = "approved" Then
                matchFound = True
                Exit For
            End If
        Next ateRow
        
        ' Write Yes/No status
        If matchFound Then
            allFundRow.Cells(1, ateMatchCol).Value = "Yes"
        Else
            allFundRow.Cells(1, ateMatchCol).Value = "No"
        End If
    Next allFundRow
    
    ' Close ATE file
    wbATE.Close savechanges:=False

    
    ' ************************************************************************************
    '                             STEP 4: BLOOMBERG DATA EXTRACTION & CALCULATION
    ' ************************************************************************************

    ' A) Add New Headers for BB Data and Calculation
    loAllFund.ListColumns.Add.Name = "BB Status"
    loAllFund.ListColumns.Add.Name = "NAV"
    loAllFund.ListColumns.Add.Name = "NAV Date"
    loAllFund.ListColumns.Add.Name = "Latest NAV" ' Added for Delta calculation
    loAllFund.ListColumns.Add.Name = "Delta"
    loAllFund.ListColumns.Add.Name = "Comments"
    
    ' Find indices of new columns
    bbStatusCol = HeaderIndex(loAllFund, "BB Status")
    navCol = HeaderIndex(loAllFund, "NAV")
    Dim navDateCol As Long: navDateCol = HeaderIndex(loAllFund, "NAV Date")
    latestNavCol = HeaderIndex(loAllFund, "Latest NAV") 
    deltaCol = HeaderIndex(loAllFund, "Delta")
    commentsCol = HeaderIndex(loAllFund, "Comments")
    
    
    ' B) Bloomberg Formula Application (Using Ticker column)
    
    ' <<<<< REQUIRED CONFIGURATION - START: BLOOMBERG FORMULA >>>>>
    ' ***************************************************************
    ' Formula for BB Status
    ' Formula for NAV (Current)
    ' Formula for Latest NAV (Needed for Delta Calc)
    ' ***************************************************************
    
    ' 1. BB Status Formula
    loAllFund.ListColumns(bbStatusCol).DataBodyRange.Formula = _
        "=IFERROR(BDP(" & loAllFund.ListColumns(tickerCol).Range.Cells(2).Address(False, False) & " & "" equity"",""MARKET_STATUS""),""#N/A"")"

    ' 2. NAV (Current) Formula - Please replace with your actual Bloomberg formula
    loAllFund.ListColumns(navCol).DataBodyRange.Formula = _
        "=IFERROR(BDP(" & loAllFund.ListColumns(tickerCol).Range.Cells(2).Address(False, False) & " & "" equity"",""PX_LAST""),""#N/A"")"
        
    ' 3. Latest NAV (Used for Delta denominator) - Please replace with your actual Bloomberg formula
    loAllFund.ListColumns(latestNavCol).DataBodyRange.Formula = _
        "=IFERROR(BDP(" & loAllFund.ListColumns(tickerCol).Range.Cells(2).Address(False, False) & " & "" equity"",""PX_LAST"",""dt=" & Format(Date - 7, "yyyymmdd") & """),""#N/A"")"
    
    ' <<<<< REQUIRED CONFIGURATION - END: BLOOMBERG FORMULA >>>>>

    ' Recalculate to fetch Bloomberg data (only works if Add-in is running)
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
    Application.Calculation = xlCalculationManual

    ' C) Delta Calculation (NAV - Latest NAV / Latest NAV)
    
    ' <<<<< REQUIRED CONFIGURATION - START: DELTA CALCULATION >>>>>
    ' ***************************************************************
    ' Delta = (NAV - Latest NAV) / Latest NAV (as percentage)
    ' ***************************************************************
    
    ' Apply formula
    loAllFund.ListColumns(deltaCol).DataBodyRange.FormulaR1C1 = _
        "=(RC" & navCol & " - RC" & latestNavCol & ") / RC" & latestNavCol
        
    ' Set column format to Percentage
    loAllFund.ListColumns(deltaCol).Range.NumberFormat = "0.00%"
    
    ' <<<<< REQUIRED CONFIGURATION - END: DELTA CALCULATION >>>>>
    
    ' D) Comments based on Delta
    
    Dim deltaVal As Double
    For Each allFundRow In loAllFund.DataBodyRange.Rows
        On Error Resume Next ' Handle errors (like #N/A or #DIV/0) in Delta column
        deltaVal = allFundRow.Cells(1, deltaCol).Value
        On Error GoTo ErrHandler
        
        If IsError(allFundRow.Cells(1, deltaCol).Value) Then
            allFundRow.Cells(1, commentsCol).Value = "Check Data/Formula Error"
        ElseIf deltaVal > 1 Or deltaVal < -0.5 Then ' 100% or -50%
            allFundRow.Cells(1, commentsCol).Value = "Delta Check"
        Else
            allFundRow.Cells(1, commentsCol).Value = "Update"
        End If
    Next allFundRow


    ' ************************************************************************************
    '                             STEP 5: OUTPUT SPLIT & STATS
    ' ************************************************************************************
    
    ' Remove filters if any, and set table to values for copy
    loAllFund.AutoFilter.ShowAllData
    loAllFund.Range.Copy
    loAllFund.Range.PasteSpecial xlPasteValues
    Application.CutCopyMode = False

    ' 1. Create EMEA Output File
    Call SplitOutput(loAllFund, "FI-EMEA", buCol, "FI-EMEA Output.xlsx")
    
    ' 2. Create US Output File
    Call SplitOutput(loAllFund, "FI-US", buCol, "FI-US Output.xlsx")

    ' Close the temporary All Fund file
    wbAllFund.Close savechanges:=False

    
    ' ************************************************************************************
    '                               EXIT & ERROR HANDLING (Same as before)
    ' ************************************************************************************
SafeExit:
    ' Final cleanup (Performance settings wapas on karna)
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    MsgBox "Processing Completed. Check for FI-EMEA Output.xlsx and FI-US Output.xlsx", vbInformation
    
    Exit Sub
    
ErrHandler:
    ' Error handling
    MsgBox "Error: " & Err.Description & vbCrLf & "Process Failed", vbCritical
    
    ' Force cleanup in case of error
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    ' Close any open files (optional: add error checking for Not Nothing)
    If Not wbTicker Is Nothing Then wbTicker.Close savechanges:=False
    If Not wbAllFund Is Nothing Then wbAllFund.Close savechanges:=False
    If Not wbATE Is Nothing Then wbATE.Close savechanges:=False
    
    Resume SafeExit
    
End Sub

' ************************************************************************************
'                       SUPPORT FUNCTIONS (HeaderIndex, GetFilePath, SetupListObject)
' ************************************************************************************

Private Function HeaderIndex(ByVal lo As ListObject, ByVal headerName As String) As Long
    ' (Same function as before to get column index from header name)
    ' ... implementation remains the same
    Dim hdr As Range
    For Each hdr In lo.HeaderRowRange.Cells
        If LCase(Trim(hdr.Value)) = LCase(Trim(headerName)) Then
            HeaderIndex = hdr.Column
            Exit Function
        End If
    Next hdr
    HeaderIndex = 0
End Function

Private Function GetFilePath(ByVal sTitle As String) As String
    ' Function to show File Picker dialog
    Dim fldg As FileDialog
    Set fldg = Application.FileDialog(msoFileDialogFilePicker)
    With fldg
        .Title = sTitle
        .AllowMultiSelect = False
        If .Show = -1 Then GetFilePath = .SelectedItems(1) Else GetFilePath = ""
    End With
End Function

Private Function SetupListObject(ByVal ws As Worksheet, ByVal sName As String) As ListObject
    ' Function to convert data into ListObject
    Dim lRow As Long
    lRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    Set SetupListObject = ws.ListObjects.Add( _
        SourceType:=xlSrcRange, _
        Source:=ws.Range(ws.Cells(1, 1), ws.Cells(lRow, ws.UsedRange.Columns.Count)), _
        XlListObjectHasHeaders:=xlYes)
    SetupListObject.Name = sName
End Function

' ************************************************************************************
'                                   SPLIT OUTPUT FUNCTION
' ************************************************************************************

Private Sub SplitOutput(ByVal loSource As ListObject, ByVal sFilterValue As String, ByVal lFilterCol As Long, ByVal sFileName As String)
    
    ' Temporary workbook/sheet declarations
    Dim wbOut As Workbook
    Dim wsOut As Worksheet
    Dim wsStats As Worksheet
    Dim rngData As Range
    
    ' Filter the source data
    loSource.Range.AutoFilter Field:=lFilterCol, Criteria1:=sFilterValue
    
    On Error Resume Next
    Set rngData = loSource.DataBodyRange.SpecialCells(xlCellTypeVisible)
    On Error GoTo ErrHandler
    
    If rngData Is Nothing Then
        ' No data for this filter value
        loSource.AutoFilter.ShowAllData
        Exit Sub
    End If
    
    ' Create new workbook
    Set wbOut = Workbooks.Add
    Set wsOut = wbOut.Sheets(1)
    wsOut.Name = sFilterValue & " Data"
    
    ' Copy Filtered Data
    loSource.HeaderRowRange.Copy Destination:=wsOut.Range("A1")
    rngData.Copy Destination:=wsOut.Range("A2")
    
    ' Add Stats Sheet
    Set wsStats = wbOut.Sheets.Add(After:=wsOut)
    wsStats.Name = "Stats"
    
    ' Write Stats
    wsStats.Cells(1, 1).Value = "Business Unit:"
    wsStats.Cells(1, 2).Value = sFilterValue
    wsStats.Cells(2, 1).Value = "Total Records:"
    wsStats.Cells(2, 2).Value = rngData.Rows.Count
    ' (Yahan aur stats add kiye ja sakte hain)

    ' Save and Close
    Application.DisplayAlerts = False
    wbOut.SaveAs Filename:=ThisWorkbook.Path & "\" & sFileName, FileFormat:=xlOpenXMLWorkbook
    Application.DisplayAlerts = True
    wbOut.Close savechanges:=False
    
    ' Clear filter on source
    loSource.AutoFilter.ShowAllData

End Sub
